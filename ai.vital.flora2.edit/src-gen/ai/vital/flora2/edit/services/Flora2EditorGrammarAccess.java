/*
* generated by Xtext
*/
package ai.vital.flora2.edit.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class Flora2EditorGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpsExpressionInfinityParserRuleCall_0_0 = (RuleCall)cExpsAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//// grammar org.archstudio.prolog.xtext.Prolog hidden(WHITESPACE, SINGLE_LINE_COMMENT)
		//Model:
		//	(exps+=ExpressionInfinity ".")+;
		public ParserRule getRule() { return rule; }

		//(exps+=ExpressionInfinity ".")+
		public Group getGroup() { return cGroup; }

		//exps+=ExpressionInfinity
		public Assignment getExpsAssignment_0() { return cExpsAssignment_0; }

		//ExpressionInfinity
		public RuleCall getExpsExpressionInfinityParserRuleCall_0_0() { return cExpsExpressionInfinityParserRuleCall_0_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
	}

	public class ATOMSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ATOMS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final RuleCall cATOMTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cOP1200XFXTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cOP1200FXTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cOP1150FXTerminalRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cOP1100XFYTerminalRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cOP1050XFYTerminalRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cOP1000XFYTerminalRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cOP954XFYTerminalRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cOP900FYTerminalRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cOP900FXTerminalRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cOP700XFXTerminalRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cOP600XFYTerminalRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cOP500YFXTerminalRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cOP500FXTerminalRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cOP400YFXTerminalRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cOP200XFXTerminalRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final RuleCall cOP200XFYTerminalRuleCall_18 = (RuleCall)cAlternatives.eContents().get(18);
		
		//ATOMS:
		//	"." | "!" | ATOM | OP1200XFX | OP1200FX | OP1150FX | OP1100XFY | OP1050XFY | OP1000XFY | OP954XFY | OP900FY | OP900FX
		//	| OP700XFX | OP600XFY | OP500YFX | OP500FX | OP400YFX | OP200XFX | OP200XFY;
		public ParserRule getRule() { return rule; }

		//"." | "!" | ATOM | OP1200XFX | OP1200FX | OP1150FX | OP1100XFY | OP1050XFY | OP1000XFY | OP954XFY | OP900FY | OP900FX |
		//OP700XFX | OP600XFY | OP500YFX | OP500FX | OP400YFX | OP200XFX | OP200XFY
		public Alternatives getAlternatives() { return cAlternatives; }

		//"."
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_1() { return cExclamationMarkKeyword_1; }

		//ATOM
		public RuleCall getATOMTerminalRuleCall_2() { return cATOMTerminalRuleCall_2; }

		//OP1200XFX
		public RuleCall getOP1200XFXTerminalRuleCall_3() { return cOP1200XFXTerminalRuleCall_3; }

		//OP1200FX
		public RuleCall getOP1200FXTerminalRuleCall_4() { return cOP1200FXTerminalRuleCall_4; }

		//OP1150FX
		public RuleCall getOP1150FXTerminalRuleCall_5() { return cOP1150FXTerminalRuleCall_5; }

		//OP1100XFY
		public RuleCall getOP1100XFYTerminalRuleCall_6() { return cOP1100XFYTerminalRuleCall_6; }

		//OP1050XFY
		public RuleCall getOP1050XFYTerminalRuleCall_7() { return cOP1050XFYTerminalRuleCall_7; }

		//OP1000XFY
		public RuleCall getOP1000XFYTerminalRuleCall_8() { return cOP1000XFYTerminalRuleCall_8; }

		//OP954XFY
		public RuleCall getOP954XFYTerminalRuleCall_9() { return cOP954XFYTerminalRuleCall_9; }

		//OP900FY
		public RuleCall getOP900FYTerminalRuleCall_10() { return cOP900FYTerminalRuleCall_10; }

		//OP900FX
		public RuleCall getOP900FXTerminalRuleCall_11() { return cOP900FXTerminalRuleCall_11; }

		//OP700XFX
		public RuleCall getOP700XFXTerminalRuleCall_12() { return cOP700XFXTerminalRuleCall_12; }

		//OP600XFY
		public RuleCall getOP600XFYTerminalRuleCall_13() { return cOP600XFYTerminalRuleCall_13; }

		//OP500YFX
		public RuleCall getOP500YFXTerminalRuleCall_14() { return cOP500YFXTerminalRuleCall_14; }

		//OP500FX
		public RuleCall getOP500FXTerminalRuleCall_15() { return cOP500FXTerminalRuleCall_15; }

		//OP400YFX
		public RuleCall getOP400YFXTerminalRuleCall_16() { return cOP400YFXTerminalRuleCall_16; }

		//OP200XFX
		public RuleCall getOP200XFXTerminalRuleCall_17() { return cOP200XFXTerminalRuleCall_17; }

		//OP200XFY
		public RuleCall getOP200XFYTerminalRuleCall_18() { return cOP200XFYTerminalRuleCall_18; }
	}

	public class NUMBERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NUMBER");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final RuleCall cEXT_INTTerminalRuleCall_2_1_0 = (RuleCall)cAlternatives_2_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1_1 = (RuleCall)cAlternatives_2_1.eContents().get(1);
		
		//NUMBER hidden():
		//	"-"? INT ("." (EXT_INT | INT))?;
		public ParserRule getRule() { return rule; }

		//"-"? INT ("." (EXT_INT | INT))?
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//("." (EXT_INT | INT))?
		public Group getGroup_2() { return cGroup_2; }

		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }

		//EXT_INT | INT
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }

		//EXT_INT
		public RuleCall getEXT_INTTerminalRuleCall_2_1_0() { return cEXT_INTTerminalRuleCall_2_1_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_2_1_1() { return cINTTerminalRuleCall_2_1_1; }
	}

	public class ExpressionInfinityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionInfinity");
		private final RuleCall cExpression1200xfxParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// http://www.csupomona.edu/~jrfisher/www/prolog_tutorial/4.html
		//// xfx infix nonassociative 
		//// xfy infix right-associative 
		//// yfx infix left-associative 
		//// fx prefix nonassociative 
		//// fy prefix right-associative 
		//// xf postfix nonassociative 
		//// yf postfix left-associative
		//ExpressionInfinity returns Expression:
		//	Expression1200xfx;
		public ParserRule getRule() { return rule; }

		//Expression1200xfx
		public RuleCall getExpression1200xfxParserRuleCall() { return cExpression1200xfxParserRuleCall; }
	}

	public class Expression1200xfxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression1200xfx");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression1200fxParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpOP1200XFXTerminalRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpression1200fxParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Expression1200xfx returns Expression:
		//	Expression1200fx ({Expression.left=current} op=OP1200XFX right=Expression1200fx)?;
		public ParserRule getRule() { return rule; }

		//Expression1200fx ({Expression.left=current} op=OP1200XFX right=Expression1200fx)?
		public Group getGroup() { return cGroup; }

		//Expression1200fx
		public RuleCall getExpression1200fxParserRuleCall_0() { return cExpression1200fxParserRuleCall_0; }

		//({Expression.left=current} op=OP1200XFX right=Expression1200fx)?
		public Group getGroup_1() { return cGroup_1; }

		//{Expression.left=current}
		public Action getExpressionLeftAction_1_0() { return cExpressionLeftAction_1_0; }

		//op=OP1200XFX
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//OP1200XFX
		public RuleCall getOpOP1200XFXTerminalRuleCall_1_1_0() { return cOpOP1200XFXTerminalRuleCall_1_1_0; }

		//right=Expression1200fx
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Expression1200fx
		public RuleCall getRightExpression1200fxParserRuleCall_1_2_0() { return cRightExpression1200fxParserRuleCall_1_2_0; }
	}

	public class Expression1200fxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression1200fx");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpOP1200FXTerminalRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Assignment cRightAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRightExpression1150fxParserRuleCall_1_0 = (RuleCall)cRightAssignment_1.eContents().get(0);
		
		//Expression1200fx returns UnaryExpression:
		//	op=OP1200FX? right=Expression1150fx;
		public ParserRule getRule() { return rule; }

		//op=OP1200FX? right=Expression1150fx
		public Group getGroup() { return cGroup; }

		//op=OP1200FX?
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }

		//OP1200FX
		public RuleCall getOpOP1200FXTerminalRuleCall_0_0() { return cOpOP1200FXTerminalRuleCall_0_0; }

		//right=Expression1150fx
		public Assignment getRightAssignment_1() { return cRightAssignment_1; }

		//Expression1150fx
		public RuleCall getRightExpression1150fxParserRuleCall_1_0() { return cRightExpression1150fxParserRuleCall_1_0; }
	}

	public class Expression1150fxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression1150fx");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpOP1150FXTerminalRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Assignment cRightAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRightExpression1100xfyParserRuleCall_1_0 = (RuleCall)cRightAssignment_1.eContents().get(0);
		
		//Expression1150fx returns UnaryExpression:
		//	op=OP1150FX? right=Expression1100xfy;
		public ParserRule getRule() { return rule; }

		//op=OP1150FX? right=Expression1100xfy
		public Group getGroup() { return cGroup; }

		//op=OP1150FX?
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }

		//OP1150FX
		public RuleCall getOpOP1150FXTerminalRuleCall_0_0() { return cOpOP1150FXTerminalRuleCall_0_0; }

		//right=Expression1100xfy
		public Assignment getRightAssignment_1() { return cRightAssignment_1; }

		//Expression1100xfy
		public RuleCall getRightExpression1100xfyParserRuleCall_1_0() { return cRightExpression1100xfyParserRuleCall_1_0; }
	}

	public class Expression1100xfyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression1100xfy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression1050xfyParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpOP1100XFYTerminalRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpression1100xfyParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Expression1100xfy returns Expression:
		//	Expression1050xfy ({Expression.left=current} op=OP1100XFY right=Expression1100xfy)?;
		public ParserRule getRule() { return rule; }

		//Expression1050xfy ({Expression.left=current} op=OP1100XFY right=Expression1100xfy)?
		public Group getGroup() { return cGroup; }

		//Expression1050xfy
		public RuleCall getExpression1050xfyParserRuleCall_0() { return cExpression1050xfyParserRuleCall_0; }

		//({Expression.left=current} op=OP1100XFY right=Expression1100xfy)?
		public Group getGroup_1() { return cGroup_1; }

		//{Expression.left=current}
		public Action getExpressionLeftAction_1_0() { return cExpressionLeftAction_1_0; }

		//op=OP1100XFY
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//OP1100XFY
		public RuleCall getOpOP1100XFYTerminalRuleCall_1_1_0() { return cOpOP1100XFYTerminalRuleCall_1_1_0; }

		//right=Expression1100xfy
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Expression1100xfy
		public RuleCall getRightExpression1100xfyParserRuleCall_1_2_0() { return cRightExpression1100xfyParserRuleCall_1_2_0; }
	}

	public class Expression1050xfyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression1050xfy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression1000xfyParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpOP1050XFYTerminalRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpression1050xfyParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Expression1050xfy returns Expression:
		//	Expression1000xfy ({Expression.left=current} op=OP1050XFY right=Expression1050xfy)?;
		public ParserRule getRule() { return rule; }

		//Expression1000xfy ({Expression.left=current} op=OP1050XFY right=Expression1050xfy)?
		public Group getGroup() { return cGroup; }

		//Expression1000xfy
		public RuleCall getExpression1000xfyParserRuleCall_0() { return cExpression1000xfyParserRuleCall_0; }

		//({Expression.left=current} op=OP1050XFY right=Expression1050xfy)?
		public Group getGroup_1() { return cGroup_1; }

		//{Expression.left=current}
		public Action getExpressionLeftAction_1_0() { return cExpressionLeftAction_1_0; }

		//op=OP1050XFY
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//OP1050XFY
		public RuleCall getOpOP1050XFYTerminalRuleCall_1_1_0() { return cOpOP1050XFYTerminalRuleCall_1_1_0; }

		//right=Expression1050xfy
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Expression1050xfy
		public RuleCall getRightExpression1050xfyParserRuleCall_1_2_0() { return cRightExpression1050xfyParserRuleCall_1_2_0; }
	}

	public class Expression1000xfyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression1000xfy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression954xfyParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpOP1000XFYTerminalRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpression1000xfyParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Expression1000xfy returns Expression:
		//	Expression954xfy ({Expression.left=current} op=OP1000XFY right=Expression1000xfy)?;
		public ParserRule getRule() { return rule; }

		//Expression954xfy ({Expression.left=current} op=OP1000XFY right=Expression1000xfy)?
		public Group getGroup() { return cGroup; }

		//Expression954xfy
		public RuleCall getExpression954xfyParserRuleCall_0() { return cExpression954xfyParserRuleCall_0; }

		//({Expression.left=current} op=OP1000XFY right=Expression1000xfy)?
		public Group getGroup_1() { return cGroup_1; }

		//{Expression.left=current}
		public Action getExpressionLeftAction_1_0() { return cExpressionLeftAction_1_0; }

		//op=OP1000XFY
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//OP1000XFY
		public RuleCall getOpOP1000XFYTerminalRuleCall_1_1_0() { return cOpOP1000XFYTerminalRuleCall_1_1_0; }

		//right=Expression1000xfy
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Expression1000xfy
		public RuleCall getRightExpression1000xfyParserRuleCall_1_2_0() { return cRightExpression1000xfyParserRuleCall_1_2_0; }
	}

	public class Expression954xfyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression954xfy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression900fyParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpOP954XFYTerminalRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpression954xfyParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Expression954xfy returns Expression:
		//	Expression900fy ({Expression.left=current} op=OP954XFY right=Expression954xfy)?;
		public ParserRule getRule() { return rule; }

		//Expression900fy ({Expression.left=current} op=OP954XFY right=Expression954xfy)?
		public Group getGroup() { return cGroup; }

		//Expression900fy
		public RuleCall getExpression900fyParserRuleCall_0() { return cExpression900fyParserRuleCall_0; }

		//({Expression.left=current} op=OP954XFY right=Expression954xfy)?
		public Group getGroup_1() { return cGroup_1; }

		//{Expression.left=current}
		public Action getExpressionLeftAction_1_0() { return cExpressionLeftAction_1_0; }

		//op=OP954XFY
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//OP954XFY
		public RuleCall getOpOP954XFYTerminalRuleCall_1_1_0() { return cOpOP954XFYTerminalRuleCall_1_1_0; }

		//right=Expression954xfy
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Expression954xfy
		public RuleCall getRightExpression954xfyParserRuleCall_1_2_0() { return cRightExpression954xfyParserRuleCall_1_2_0; }
	}

	public class Expression900fyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression900fy");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cOpAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cOpOP900FYTerminalRuleCall_0_0_0 = (RuleCall)cOpAssignment_0_0.eContents().get(0);
		private final Assignment cRightAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cRightExpression900fyParserRuleCall_0_1_0 = (RuleCall)cRightAssignment_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cRightExpression900fxParserRuleCall_1_0 = (RuleCall)cRightAssignment_1.eContents().get(0);
		
		//Expression900fy returns UnaryExpression:
		//	op=OP900FY right=Expression900fy | right=Expression900fx;
		public ParserRule getRule() { return rule; }

		//op=OP900FY right=Expression900fy | right=Expression900fx
		public Alternatives getAlternatives() { return cAlternatives; }

		//op=OP900FY right=Expression900fy
		public Group getGroup_0() { return cGroup_0; }

		//op=OP900FY
		public Assignment getOpAssignment_0_0() { return cOpAssignment_0_0; }

		//OP900FY
		public RuleCall getOpOP900FYTerminalRuleCall_0_0_0() { return cOpOP900FYTerminalRuleCall_0_0_0; }

		//right=Expression900fy
		public Assignment getRightAssignment_0_1() { return cRightAssignment_0_1; }

		//Expression900fy
		public RuleCall getRightExpression900fyParserRuleCall_0_1_0() { return cRightExpression900fyParserRuleCall_0_1_0; }

		//right=Expression900fx
		public Assignment getRightAssignment_1() { return cRightAssignment_1; }

		//Expression900fx
		public RuleCall getRightExpression900fxParserRuleCall_1_0() { return cRightExpression900fxParserRuleCall_1_0; }
	}

	public class Expression900fxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression900fx");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpOP900FXTerminalRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Assignment cRightAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRightExpression700xfxParserRuleCall_1_0 = (RuleCall)cRightAssignment_1.eContents().get(0);
		
		//Expression900fx returns UnaryExpression:
		//	op=OP900FX? right=Expression700xfx;
		public ParserRule getRule() { return rule; }

		//op=OP900FX? right=Expression700xfx
		public Group getGroup() { return cGroup; }

		//op=OP900FX?
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }

		//OP900FX
		public RuleCall getOpOP900FXTerminalRuleCall_0_0() { return cOpOP900FXTerminalRuleCall_0_0; }

		//right=Expression700xfx
		public Assignment getRightAssignment_1() { return cRightAssignment_1; }

		//Expression700xfx
		public RuleCall getRightExpression700xfxParserRuleCall_1_0() { return cRightExpression700xfxParserRuleCall_1_0; }
	}

	public class Expression700xfxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression700xfx");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression600xfyParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpOP700XFXTerminalRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpression600xfyParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Expression700xfx returns Expression:
		//	Expression600xfy ({Expression.left=current} op=OP700XFX right=Expression600xfy)?;
		public ParserRule getRule() { return rule; }

		//Expression600xfy ({Expression.left=current} op=OP700XFX right=Expression600xfy)?
		public Group getGroup() { return cGroup; }

		//Expression600xfy
		public RuleCall getExpression600xfyParserRuleCall_0() { return cExpression600xfyParserRuleCall_0; }

		//({Expression.left=current} op=OP700XFX right=Expression600xfy)?
		public Group getGroup_1() { return cGroup_1; }

		//{Expression.left=current}
		public Action getExpressionLeftAction_1_0() { return cExpressionLeftAction_1_0; }

		//op=OP700XFX
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//OP700XFX
		public RuleCall getOpOP700XFXTerminalRuleCall_1_1_0() { return cOpOP700XFXTerminalRuleCall_1_1_0; }

		//right=Expression600xfy
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Expression600xfy
		public RuleCall getRightExpression600xfyParserRuleCall_1_2_0() { return cRightExpression600xfyParserRuleCall_1_2_0; }
	}

	public class Expression600xfyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression600xfy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression500yfxParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpOP600XFYTerminalRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpression600xfyParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Expression600xfy returns Expression:
		//	Expression500yfx ({Expression.left=current} op=OP600XFY right=Expression600xfy)?;
		public ParserRule getRule() { return rule; }

		//Expression500yfx ({Expression.left=current} op=OP600XFY right=Expression600xfy)?
		public Group getGroup() { return cGroup; }

		//Expression500yfx
		public RuleCall getExpression500yfxParserRuleCall_0() { return cExpression500yfxParserRuleCall_0; }

		//({Expression.left=current} op=OP600XFY right=Expression600xfy)?
		public Group getGroup_1() { return cGroup_1; }

		//{Expression.left=current}
		public Action getExpressionLeftAction_1_0() { return cExpressionLeftAction_1_0; }

		//op=OP600XFY
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//OP600XFY
		public RuleCall getOpOP600XFYTerminalRuleCall_1_1_0() { return cOpOP600XFYTerminalRuleCall_1_1_0; }

		//right=Expression600xfy
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Expression600xfy
		public RuleCall getRightExpression600xfyParserRuleCall_1_2_0() { return cRightExpression600xfyParserRuleCall_1_2_0; }
	}

	public class Expression500yfxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression500yfx");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression500fxParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpOP500YFXTerminalRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpression500fxParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Expression500yfx returns Expression:
		//	Expression500fx ({Expression.left=current} op=OP500YFX right=Expression500fx)*;
		public ParserRule getRule() { return rule; }

		//Expression500fx ({Expression.left=current} op=OP500YFX right=Expression500fx)*
		public Group getGroup() { return cGroup; }

		//Expression500fx
		public RuleCall getExpression500fxParserRuleCall_0() { return cExpression500fxParserRuleCall_0; }

		//({Expression.left=current} op=OP500YFX right=Expression500fx)*
		public Group getGroup_1() { return cGroup_1; }

		//{Expression.left=current}
		public Action getExpressionLeftAction_1_0() { return cExpressionLeftAction_1_0; }

		//op=OP500YFX
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//OP500YFX
		public RuleCall getOpOP500YFXTerminalRuleCall_1_1_0() { return cOpOP500YFXTerminalRuleCall_1_1_0; }

		//right=Expression500fx
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Expression500fx
		public RuleCall getRightExpression500fxParserRuleCall_1_2_0() { return cRightExpression500fxParserRuleCall_1_2_0; }
	}

	public class Expression500fxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression500fx");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpOP500FXTerminalRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Assignment cRightAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRightExpression400yfxParserRuleCall_1_0 = (RuleCall)cRightAssignment_1.eContents().get(0);
		
		//Expression500fx returns UnaryExpression:
		//	op=OP500FX? right=Expression400yfx;
		public ParserRule getRule() { return rule; }

		//op=OP500FX? right=Expression400yfx
		public Group getGroup() { return cGroup; }

		//op=OP500FX?
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }

		//OP500FX
		public RuleCall getOpOP500FXTerminalRuleCall_0_0() { return cOpOP500FXTerminalRuleCall_0_0; }

		//right=Expression400yfx
		public Assignment getRightAssignment_1() { return cRightAssignment_1; }

		//Expression400yfx
		public RuleCall getRightExpression400yfxParserRuleCall_1_0() { return cRightExpression400yfxParserRuleCall_1_0; }
	}

	public class Expression400yfxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression400yfx");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression200xfxParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpOP400YFXTerminalRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpression200xfxParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Expression400yfx returns Expression:
		//	Expression200xfx ({Expression.left=current} op=OP400YFX right=Expression200xfx)*;
		public ParserRule getRule() { return rule; }

		//Expression200xfx ({Expression.left=current} op=OP400YFX right=Expression200xfx)*
		public Group getGroup() { return cGroup; }

		//Expression200xfx
		public RuleCall getExpression200xfxParserRuleCall_0() { return cExpression200xfxParserRuleCall_0; }

		//({Expression.left=current} op=OP400YFX right=Expression200xfx)*
		public Group getGroup_1() { return cGroup_1; }

		//{Expression.left=current}
		public Action getExpressionLeftAction_1_0() { return cExpressionLeftAction_1_0; }

		//op=OP400YFX
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//OP400YFX
		public RuleCall getOpOP400YFXTerminalRuleCall_1_1_0() { return cOpOP400YFXTerminalRuleCall_1_1_0; }

		//right=Expression200xfx
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Expression200xfx
		public RuleCall getRightExpression200xfxParserRuleCall_1_2_0() { return cRightExpression200xfxParserRuleCall_1_2_0; }
	}

	public class Expression200xfxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression200xfx");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression200xfyParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpOP200XFXTerminalRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpression200xfyParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Expression200xfx returns Expression:
		//	Expression200xfy ({Expression.left=current} op=OP200XFX right=Expression200xfy)?;
		public ParserRule getRule() { return rule; }

		//Expression200xfy ({Expression.left=current} op=OP200XFX right=Expression200xfy)?
		public Group getGroup() { return cGroup; }

		//Expression200xfy
		public RuleCall getExpression200xfyParserRuleCall_0() { return cExpression200xfyParserRuleCall_0; }

		//({Expression.left=current} op=OP200XFX right=Expression200xfy)?
		public Group getGroup_1() { return cGroup_1; }

		//{Expression.left=current}
		public Action getExpressionLeftAction_1_0() { return cExpressionLeftAction_1_0; }

		//op=OP200XFX
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//OP200XFX
		public RuleCall getOpOP200XFXTerminalRuleCall_1_1_0() { return cOpOP200XFXTerminalRuleCall_1_1_0; }

		//right=Expression200xfy
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Expression200xfy
		public RuleCall getRightExpression200xfyParserRuleCall_1_2_0() { return cRightExpression200xfyParserRuleCall_1_2_0; }
	}

	public class Expression200xfyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression200xfy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression0ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpOP200XFYTerminalRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpression200xfyParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Expression200xfy returns Expression:
		//	Expression0 ({Expression.left=current} op=OP200XFY right=Expression200xfy)?;
		public ParserRule getRule() { return rule; }

		//Expression0 ({Expression.left=current} op=OP200XFY right=Expression200xfy)?
		public Group getGroup() { return cGroup; }

		//Expression0
		public RuleCall getExpression0ParserRuleCall_0() { return cExpression0ParserRuleCall_0; }

		//({Expression.left=current} op=OP200XFY right=Expression200xfy)?
		public Group getGroup_1() { return cGroup_1; }

		//{Expression.left=current}
		public Action getExpressionLeftAction_1_0() { return cExpressionLeftAction_1_0; }

		//op=OP200XFY
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//OP200XFY
		public RuleCall getOpOP200XFYTerminalRuleCall_1_1_0() { return cOpOP200XFYTerminalRuleCall_1_1_0; }

		//right=Expression200xfy
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Expression200xfy
		public RuleCall getRightExpression200xfyParserRuleCall_1_2_0() { return cRightExpression200xfyParserRuleCall_1_2_0; }
	}

	public class Expression0Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression0");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cAtomExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cAtomAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cAtomATOMSParserRuleCall_0_1_0 = (RuleCall)cAtomAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cTermsAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cTermsExpressionInfinityParserRuleCall_0_2_1_0 = (RuleCall)cTermsAssignment_0_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_2_2 = (Keyword)cGroup_0_2.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cVariableExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameVARIABLETerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cStringExpressionAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cNumberExpressionAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueNUMBERParserRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cListExpressionAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Assignment cHeadAssignment_4_2_0 = (Assignment)cGroup_4_2.eContents().get(0);
		private final RuleCall cHeadExpressionInfinityParserRuleCall_4_2_0_0 = (RuleCall)cHeadAssignment_4_2_0.eContents().get(0);
		private final Group cGroup_4_2_1 = (Group)cGroup_4_2.eContents().get(1);
		private final Keyword cVerticalLineKeyword_4_2_1_0 = (Keyword)cGroup_4_2_1.eContents().get(0);
		private final Assignment cTailAssignment_4_2_1_1 = (Assignment)cGroup_4_2_1.eContents().get(1);
		private final RuleCall cTailExpressionInfinityParserRuleCall_4_2_1_1_0 = (RuleCall)cTailAssignment_4_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final RuleCall cExpressionInfinityParserRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		
		//Expression0 returns Expression:
		//	{AtomExpression} atom=ATOMS ("(" terms=ExpressionInfinity ")")? | {VariableExpression} name=VARIABLE |
		//	{StringExpression} value=STRING | {NumberExpression} value=NUMBER | {ListExpression} "[" (head=ExpressionInfinity ("|"
		//	tail=ExpressionInfinity)?)? "]" | "(" ExpressionInfinity ")";
		public ParserRule getRule() { return rule; }

		//{AtomExpression} atom=ATOMS ("(" terms=ExpressionInfinity ")")? | {VariableExpression} name=VARIABLE |
		//{StringExpression} value=STRING | {NumberExpression} value=NUMBER | {ListExpression} "[" (head=ExpressionInfinity ("|"
		//tail=ExpressionInfinity)?)? "]" | "(" ExpressionInfinity ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{AtomExpression} atom=ATOMS ("(" terms=ExpressionInfinity ")")?
		public Group getGroup_0() { return cGroup_0; }

		//{AtomExpression}
		public Action getAtomExpressionAction_0_0() { return cAtomExpressionAction_0_0; }

		//atom=ATOMS
		public Assignment getAtomAssignment_0_1() { return cAtomAssignment_0_1; }

		//ATOMS
		public RuleCall getAtomATOMSParserRuleCall_0_1_0() { return cAtomATOMSParserRuleCall_0_1_0; }

		//("(" terms=ExpressionInfinity ")")?
		public Group getGroup_0_2() { return cGroup_0_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_2_0() { return cLeftParenthesisKeyword_0_2_0; }

		//terms=ExpressionInfinity
		public Assignment getTermsAssignment_0_2_1() { return cTermsAssignment_0_2_1; }

		//ExpressionInfinity
		public RuleCall getTermsExpressionInfinityParserRuleCall_0_2_1_0() { return cTermsExpressionInfinityParserRuleCall_0_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_2_2() { return cRightParenthesisKeyword_0_2_2; }

		//{VariableExpression} name=VARIABLE
		public Group getGroup_1() { return cGroup_1; }

		//{VariableExpression}
		public Action getVariableExpressionAction_1_0() { return cVariableExpressionAction_1_0; }

		//name=VARIABLE
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//VARIABLE
		public RuleCall getNameVARIABLETerminalRuleCall_1_1_0() { return cNameVARIABLETerminalRuleCall_1_1_0; }

		//{StringExpression} value=STRING
		public Group getGroup_2() { return cGroup_2; }

		//{StringExpression}
		public Action getStringExpressionAction_2_0() { return cStringExpressionAction_2_0; }

		//value=STRING
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_1_0() { return cValueSTRINGTerminalRuleCall_2_1_0; }

		//{NumberExpression} value=NUMBER
		public Group getGroup_3() { return cGroup_3; }

		//{NumberExpression}
		public Action getNumberExpressionAction_3_0() { return cNumberExpressionAction_3_0; }

		//value=NUMBER
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }

		//NUMBER
		public RuleCall getValueNUMBERParserRuleCall_3_1_0() { return cValueNUMBERParserRuleCall_3_1_0; }

		//{ListExpression} "[" (head=ExpressionInfinity ("|" tail=ExpressionInfinity)?)? "]"
		public Group getGroup_4() { return cGroup_4; }

		//{ListExpression}
		public Action getListExpressionAction_4_0() { return cListExpressionAction_4_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_4_1() { return cLeftSquareBracketKeyword_4_1; }

		//(head=ExpressionInfinity ("|" tail=ExpressionInfinity)?)?
		public Group getGroup_4_2() { return cGroup_4_2; }

		//head=ExpressionInfinity
		public Assignment getHeadAssignment_4_2_0() { return cHeadAssignment_4_2_0; }

		//ExpressionInfinity
		public RuleCall getHeadExpressionInfinityParserRuleCall_4_2_0_0() { return cHeadExpressionInfinityParserRuleCall_4_2_0_0; }

		//("|" tail=ExpressionInfinity)?
		public Group getGroup_4_2_1() { return cGroup_4_2_1; }

		//"|"
		public Keyword getVerticalLineKeyword_4_2_1_0() { return cVerticalLineKeyword_4_2_1_0; }

		//tail=ExpressionInfinity
		public Assignment getTailAssignment_4_2_1_1() { return cTailAssignment_4_2_1_1; }

		//ExpressionInfinity
		public RuleCall getTailExpressionInfinityParserRuleCall_4_2_1_1_0() { return cTailExpressionInfinityParserRuleCall_4_2_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4_3() { return cRightSquareBracketKeyword_4_3; }

		//"(" ExpressionInfinity ")"
		public Group getGroup_5() { return cGroup_5; }

		//"("
		public Keyword getLeftParenthesisKeyword_5_0() { return cLeftParenthesisKeyword_5_0; }

		//ExpressionInfinity
		public RuleCall getExpressionInfinityParserRuleCall_5_1() { return cExpressionInfinityParserRuleCall_5_1; }

		//")"
		public Keyword getRightParenthesisKeyword_5_2() { return cRightParenthesisKeyword_5_2; }
	}
	
	
	private final ModelElements pModel;
	private final TerminalRule tWHITESPACE;
	private final TerminalRule tSINGLE_LINE_COMMENT;
	private final TerminalRule tOP1200XFX;
	private final TerminalRule tOP1200FX;
	private final TerminalRule tOP1150FX;
	private final TerminalRule tOP1100XFY;
	private final TerminalRule tOP1050XFY;
	private final TerminalRule tOP1000XFY;
	private final TerminalRule tOP954XFY;
	private final TerminalRule tOP900FY;
	private final TerminalRule tOP900FX;
	private final TerminalRule tOP700XFX;
	private final TerminalRule tOP600XFY;
	private final TerminalRule tOP500YFX;
	private final TerminalRule tOP500FX;
	private final TerminalRule tOP400YFX;
	private final TerminalRule tOP200XFX;
	private final TerminalRule tOP200XFY;
	private final TerminalRule tATOM;
	private final ATOMSElements pATOMS;
	private final TerminalRule tVARIABLE;
	private final TerminalRule tSTRING;
	private final TerminalRule tINT;
	private final TerminalRule tEXT_INT;
	private final NUMBERElements pNUMBER;
	private final ExpressionInfinityElements pExpressionInfinity;
	private final Expression1200xfxElements pExpression1200xfx;
	private final Expression1200fxElements pExpression1200fx;
	private final Expression1150fxElements pExpression1150fx;
	private final Expression1100xfyElements pExpression1100xfy;
	private final Expression1050xfyElements pExpression1050xfy;
	private final Expression1000xfyElements pExpression1000xfy;
	private final Expression954xfyElements pExpression954xfy;
	private final Expression900fyElements pExpression900fy;
	private final Expression900fxElements pExpression900fx;
	private final Expression700xfxElements pExpression700xfx;
	private final Expression600xfyElements pExpression600xfy;
	private final Expression500yfxElements pExpression500yfx;
	private final Expression500fxElements pExpression500fx;
	private final Expression400yfxElements pExpression400yfx;
	private final Expression200xfxElements pExpression200xfx;
	private final Expression200xfyElements pExpression200xfy;
	private final Expression0Elements pExpression0;
	
	private final Grammar grammar;

	@Inject
	public Flora2EditorGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pModel = new ModelElements();
		this.tWHITESPACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WHITESPACE");
		this.tSINGLE_LINE_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SINGLE_LINE_COMMENT");
		this.tOP1200XFX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OP1200XFX");
		this.tOP1200FX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OP1200FX");
		this.tOP1150FX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OP1150FX");
		this.tOP1100XFY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OP1100XFY");
		this.tOP1050XFY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OP1050XFY");
		this.tOP1000XFY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OP1000XFY");
		this.tOP954XFY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OP954XFY");
		this.tOP900FY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OP900FY");
		this.tOP900FX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OP900FX");
		this.tOP700XFX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OP700XFX");
		this.tOP600XFY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OP600XFY");
		this.tOP500YFX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OP500YFX");
		this.tOP500FX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OP500FX");
		this.tOP400YFX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OP400YFX");
		this.tOP200XFX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OP200XFX");
		this.tOP200XFY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OP200XFY");
		this.tATOM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ATOM");
		this.pATOMS = new ATOMSElements();
		this.tVARIABLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "VARIABLE");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT");
		this.tEXT_INT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EXT_INT");
		this.pNUMBER = new NUMBERElements();
		this.pExpressionInfinity = new ExpressionInfinityElements();
		this.pExpression1200xfx = new Expression1200xfxElements();
		this.pExpression1200fx = new Expression1200fxElements();
		this.pExpression1150fx = new Expression1150fxElements();
		this.pExpression1100xfy = new Expression1100xfyElements();
		this.pExpression1050xfy = new Expression1050xfyElements();
		this.pExpression1000xfy = new Expression1000xfyElements();
		this.pExpression954xfy = new Expression954xfyElements();
		this.pExpression900fy = new Expression900fyElements();
		this.pExpression900fx = new Expression900fxElements();
		this.pExpression700xfx = new Expression700xfxElements();
		this.pExpression600xfy = new Expression600xfyElements();
		this.pExpression500yfx = new Expression500yfxElements();
		this.pExpression500fx = new Expression500fxElements();
		this.pExpression400yfx = new Expression400yfxElements();
		this.pExpression200xfx = new Expression200xfxElements();
		this.pExpression200xfy = new Expression200xfyElements();
		this.pExpression0 = new Expression0Elements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("ai.vital.flora2.edit.Flora2Editor".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//// grammar org.archstudio.prolog.xtext.Prolog hidden(WHITESPACE, SINGLE_LINE_COMMENT)
	//Model:
	//	(exps+=ExpressionInfinity ".")+;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//terminal WHITESPACE:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWHITESPACERule() {
		return tWHITESPACE;
	} 

	//terminal SINGLE_LINE_COMMENT:
	//	"%" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSINGLE_LINE_COMMENTRule() {
		return tSINGLE_LINE_COMMENT;
	} 

	//// http://www.cse.unsw.edu.au/~billw/cs9414/notes/prolog/op.html
	//terminal OP1200XFX:
	//	"-->" | ":-";
	public TerminalRule getOP1200XFXRule() {
		return tOP1200XFX;
	} 

	//terminal OP1200FX:
	//	":-" | "?-";
	public TerminalRule getOP1200FXRule() {
		return tOP1200FX;
	} 

	//terminal OP1150FX:
	//	"dynamic" | "discontiguous" | "initialization" | "module_transparent" | "multifile" | "thread_local" | "volatile";
	public TerminalRule getOP1150FXRule() {
		return tOP1150FX;
	} 

	//terminal OP1100XFY:
	//	";" | "|";
	public TerminalRule getOP1100XFYRule() {
		return tOP1100XFY;
	} 

	//terminal OP1050XFY:
	//	"->" | "*->";
	public TerminalRule getOP1050XFYRule() {
		return tOP1050XFY;
	} 

	//terminal OP1000XFY:
	//	",";
	public TerminalRule getOP1000XFYRule() {
		return tOP1000XFY;
	} 

	//terminal OP954XFY:
	//	"\\";
	public TerminalRule getOP954XFYRule() {
		return tOP954XFY;
	} 

	//terminal OP900FY:
	//	"\\+";
	public TerminalRule getOP900FYRule() {
		return tOP900FY;
	} 

	//terminal OP900FX:
	//	"~";
	public TerminalRule getOP900FXRule() {
		return tOP900FX;
	} 

	//terminal OP700XFX:
	//	"<" | "=" | "=.." | "=@=" | "=:=" | "=<" | "==" | "=\\=" | ">" | ">=" | "@<" | "@=<" | "@>" | "@>=" | "\\=" | "\\==" |
	//	"is";
	public TerminalRule getOP700XFXRule() {
		return tOP700XFX;
	} 

	//terminal OP600XFY:
	//	":";
	public TerminalRule getOP600XFYRule() {
		return tOP600XFY;
	} 

	//terminal OP500YFX:
	//	"+" | "-" | "/\\" | "\\/" | "xor";
	public TerminalRule getOP500YFXRule() {
		return tOP500YFX;
	} 

	//terminal OP500FX:
	//	"+" | "-" | "?" | "\\";
	public TerminalRule getOP500FXRule() {
		return tOP500FX;
	} 

	//terminal OP400YFX:
	//	"*" | "/" | "//" | "rdiv" | "<<" | ">>" | "mod" | "rem";
	public TerminalRule getOP400YFXRule() {
		return tOP400YFX;
	} 

	//terminal OP200XFX:
	//	"**";
	public TerminalRule getOP200XFXRule() {
		return tOP200XFX;
	} 

	//terminal OP200XFY:
	//	"^";
	public TerminalRule getOP200XFYRule() {
		return tOP200XFY;
	} 

	//terminal ATOM:
	//	"a".."z" ("A".."Z" | "a".."z" | "0".."9" | "_")*;
	public TerminalRule getATOMRule() {
		return tATOM;
	} 

	//ATOMS:
	//	"." | "!" | ATOM | OP1200XFX | OP1200FX | OP1150FX | OP1100XFY | OP1050XFY | OP1000XFY | OP954XFY | OP900FY | OP900FX
	//	| OP700XFX | OP600XFY | OP500YFX | OP500FX | OP400YFX | OP200XFX | OP200XFY;
	public ATOMSElements getATOMSAccess() {
		return pATOMS;
	}
	
	public ParserRule getATOMSRule() {
		return getATOMSAccess().getRule();
	}

	//terminal VARIABLE:
	//	("A".."Z" | "_") ("A".."Z" | "a".."z" | "0".."9" | "_")*;
	public TerminalRule getVARIABLERule() {
		return tVARIABLE;
	} 

	//terminal STRING:
	//	"\'"->"\'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	} 

	//terminal INT:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return tINT;
	} 

	//terminal EXT_INT:
	//	INT ("e" | "E") ("-" | "+")? INT;
	public TerminalRule getEXT_INTRule() {
		return tEXT_INT;
	} 

	//NUMBER hidden():
	//	"-"? INT ("." (EXT_INT | INT))?;
	public NUMBERElements getNUMBERAccess() {
		return pNUMBER;
	}
	
	public ParserRule getNUMBERRule() {
		return getNUMBERAccess().getRule();
	}

	//// http://www.csupomona.edu/~jrfisher/www/prolog_tutorial/4.html
	//// xfx infix nonassociative 
	//// xfy infix right-associative 
	//// yfx infix left-associative 
	//// fx prefix nonassociative 
	//// fy prefix right-associative 
	//// xf postfix nonassociative 
	//// yf postfix left-associative
	//ExpressionInfinity returns Expression:
	//	Expression1200xfx;
	public ExpressionInfinityElements getExpressionInfinityAccess() {
		return pExpressionInfinity;
	}
	
	public ParserRule getExpressionInfinityRule() {
		return getExpressionInfinityAccess().getRule();
	}

	//Expression1200xfx returns Expression:
	//	Expression1200fx ({Expression.left=current} op=OP1200XFX right=Expression1200fx)?;
	public Expression1200xfxElements getExpression1200xfxAccess() {
		return pExpression1200xfx;
	}
	
	public ParserRule getExpression1200xfxRule() {
		return getExpression1200xfxAccess().getRule();
	}

	//Expression1200fx returns UnaryExpression:
	//	op=OP1200FX? right=Expression1150fx;
	public Expression1200fxElements getExpression1200fxAccess() {
		return pExpression1200fx;
	}
	
	public ParserRule getExpression1200fxRule() {
		return getExpression1200fxAccess().getRule();
	}

	//Expression1150fx returns UnaryExpression:
	//	op=OP1150FX? right=Expression1100xfy;
	public Expression1150fxElements getExpression1150fxAccess() {
		return pExpression1150fx;
	}
	
	public ParserRule getExpression1150fxRule() {
		return getExpression1150fxAccess().getRule();
	}

	//Expression1100xfy returns Expression:
	//	Expression1050xfy ({Expression.left=current} op=OP1100XFY right=Expression1100xfy)?;
	public Expression1100xfyElements getExpression1100xfyAccess() {
		return pExpression1100xfy;
	}
	
	public ParserRule getExpression1100xfyRule() {
		return getExpression1100xfyAccess().getRule();
	}

	//Expression1050xfy returns Expression:
	//	Expression1000xfy ({Expression.left=current} op=OP1050XFY right=Expression1050xfy)?;
	public Expression1050xfyElements getExpression1050xfyAccess() {
		return pExpression1050xfy;
	}
	
	public ParserRule getExpression1050xfyRule() {
		return getExpression1050xfyAccess().getRule();
	}

	//Expression1000xfy returns Expression:
	//	Expression954xfy ({Expression.left=current} op=OP1000XFY right=Expression1000xfy)?;
	public Expression1000xfyElements getExpression1000xfyAccess() {
		return pExpression1000xfy;
	}
	
	public ParserRule getExpression1000xfyRule() {
		return getExpression1000xfyAccess().getRule();
	}

	//Expression954xfy returns Expression:
	//	Expression900fy ({Expression.left=current} op=OP954XFY right=Expression954xfy)?;
	public Expression954xfyElements getExpression954xfyAccess() {
		return pExpression954xfy;
	}
	
	public ParserRule getExpression954xfyRule() {
		return getExpression954xfyAccess().getRule();
	}

	//Expression900fy returns UnaryExpression:
	//	op=OP900FY right=Expression900fy | right=Expression900fx;
	public Expression900fyElements getExpression900fyAccess() {
		return pExpression900fy;
	}
	
	public ParserRule getExpression900fyRule() {
		return getExpression900fyAccess().getRule();
	}

	//Expression900fx returns UnaryExpression:
	//	op=OP900FX? right=Expression700xfx;
	public Expression900fxElements getExpression900fxAccess() {
		return pExpression900fx;
	}
	
	public ParserRule getExpression900fxRule() {
		return getExpression900fxAccess().getRule();
	}

	//Expression700xfx returns Expression:
	//	Expression600xfy ({Expression.left=current} op=OP700XFX right=Expression600xfy)?;
	public Expression700xfxElements getExpression700xfxAccess() {
		return pExpression700xfx;
	}
	
	public ParserRule getExpression700xfxRule() {
		return getExpression700xfxAccess().getRule();
	}

	//Expression600xfy returns Expression:
	//	Expression500yfx ({Expression.left=current} op=OP600XFY right=Expression600xfy)?;
	public Expression600xfyElements getExpression600xfyAccess() {
		return pExpression600xfy;
	}
	
	public ParserRule getExpression600xfyRule() {
		return getExpression600xfyAccess().getRule();
	}

	//Expression500yfx returns Expression:
	//	Expression500fx ({Expression.left=current} op=OP500YFX right=Expression500fx)*;
	public Expression500yfxElements getExpression500yfxAccess() {
		return pExpression500yfx;
	}
	
	public ParserRule getExpression500yfxRule() {
		return getExpression500yfxAccess().getRule();
	}

	//Expression500fx returns UnaryExpression:
	//	op=OP500FX? right=Expression400yfx;
	public Expression500fxElements getExpression500fxAccess() {
		return pExpression500fx;
	}
	
	public ParserRule getExpression500fxRule() {
		return getExpression500fxAccess().getRule();
	}

	//Expression400yfx returns Expression:
	//	Expression200xfx ({Expression.left=current} op=OP400YFX right=Expression200xfx)*;
	public Expression400yfxElements getExpression400yfxAccess() {
		return pExpression400yfx;
	}
	
	public ParserRule getExpression400yfxRule() {
		return getExpression400yfxAccess().getRule();
	}

	//Expression200xfx returns Expression:
	//	Expression200xfy ({Expression.left=current} op=OP200XFX right=Expression200xfy)?;
	public Expression200xfxElements getExpression200xfxAccess() {
		return pExpression200xfx;
	}
	
	public ParserRule getExpression200xfxRule() {
		return getExpression200xfxAccess().getRule();
	}

	//Expression200xfy returns Expression:
	//	Expression0 ({Expression.left=current} op=OP200XFY right=Expression200xfy)?;
	public Expression200xfyElements getExpression200xfyAccess() {
		return pExpression200xfy;
	}
	
	public ParserRule getExpression200xfyRule() {
		return getExpression200xfyAccess().getRule();
	}

	//Expression0 returns Expression:
	//	{AtomExpression} atom=ATOMS ("(" terms=ExpressionInfinity ")")? | {VariableExpression} name=VARIABLE |
	//	{StringExpression} value=STRING | {NumberExpression} value=NUMBER | {ListExpression} "[" (head=ExpressionInfinity ("|"
	//	tail=ExpressionInfinity)?)? "]" | "(" ExpressionInfinity ")";
	public Expression0Elements getExpression0Access() {
		return pExpression0;
	}
	
	public ParserRule getExpression0Rule() {
		return getExpression0Access().getRule();
	}
}
